from flask import Flask, render_template, request, send_file
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image, HRFlowable
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from zoneinfo import ZoneInfo
import io,datetime
import os


app = Flask(__name__)

# ‚úÖ C·∫•u h√¨nh s·∫£n ph·∫©m v√† gi√° theo s·ªë l∆∞·ª£ng
PRODUCTS = {
    "KDG X√ÅM PH·ªî TH√îNG": {
        "price_tiers": [(100, 125000), (50, 140000), (20, 145000), (10, 150000)],
        "market_price": 195000,
        "base_commission": 8000
    },
    "KDG TR·∫ÆNG PH·ªî TH√îNG": {
        "price_tiers": [(100, 140000), (50, 155000), (20, 160000), (10, 165000)],
        "market_price": 250000,
        "base_commission": 15000
    },
    "KDG X√ÅM EXTRA": {
        "price_tiers": [(100, 170000), (50, 180000), (20, 190000), (10, 195000)],
        "market_price": 295000,
        "base_commission": 15000
    },
    "KDG TR·∫ÆNG EXTRA": {
        "price_tiers": [(100, 200000), (50, 210000), (20, 220000), (10, 225000)],
        "market_price": 350000,
        "base_commission": 15000
    },
    "KCR TR·∫ÆNG PH·ªî TH√îNG (B·ªäCH)": {
        "price_tiers": [(40, 230000), (10, 265000), (5, 290000)],
        "market_price": 336000,
        "base_commission": 15000
    },
    "KCR TR·∫ÆNG EXTRA (B·ªäCH)": {
        "price_tiers": [
            (40, 300000),
            (10, 336000),
            (5, 360000)
        ],
        "market_price": 408000,
        "base_commission": 30000
    },
    "KCR TR·∫ÆNG H·ªòP": {
        "price_tiers": [
            (30, 285000),
            (10, 345000),
            (5, 375000)
        ],
        "market_price": 484000,
        "base_commission": 10000
    }
}

def get_price(product, quantity):
    tiers = PRODUCTS.get(product, {}).get("price_tiers", [])
    for min_qty, price in tiers:
        if quantity >= min_qty:
            return price
    return 0

def get_market_price(product):
    return PRODUCTS.get(product, {}).get("market_price", 0)

def get_base_commission(product):
    return PRODUCTS.get(product, {}).get("base_commission", 0)

@app.route('/', methods=['GET', 'POST'])
def index():
    result = None
    total_commission = 0
    product_results = []

    if request.method == 'POST':
        # L·∫•y danh s√°ch s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng b√°n v√† t·∫∑ng t·ª´ form
        products = request.form.getlist('product[]')
        sell_quantities = request.form.getlist('sell_qty[]')
        gift_quantities = request.form.getlist('gift_qty[]')

        # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if not products or not sell_quantities or not gift_quantities:
            return render_template('index.html', result={'error': 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m v√† nh·∫≠p s·ªë l∆∞·ª£ng.'})

        for i, (product, sell_qty, gift_qty) in enumerate(zip(products, sell_quantities, gift_quantities)):
            try:
                sell_qty = int(sell_qty)
                gift_qty = int(gift_qty)
            except ValueError:
                return render_template('index.html', result={'error': 'S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n.'})

            # N·∫øu l√† s·∫£n ph·∫©m KCR th√¨ cho ph√©p t·ª´ 5 tr·ªü l√™n, c√°c lo·∫°i kh√°c t·ª´ 10
            if "KCR" in product:
                min_qty = 5
            else:
                min_qty = 10

            if sell_qty < min_qty:
                return render_template('index.html',
                                       result={'error': f'S·ªë l∆∞·ª£ng b√°n c·ªßa {product} ph·∫£i t·ª´ {min_qty} tr·ªü l√™n.'})

            total_qty = sell_qty + gift_qty
            G = get_price(product, sell_qty)
            D = get_market_price(product)

            if total_qty <= 0:
                return render_template('index.html', result={'error': f'T·ªïng s·ªë l∆∞·ª£ng c·ªßa {product} ph·∫£i l·ªõn h∆°n 0.'})

            after_gift_price = (D * sell_qty) / total_qty
            approved = after_gift_price >= G

            product_result = {
                'product': product,
                'sell_qty': sell_qty,
                'gift_qty': gift_qty,
                'G': G,
                'D': D,
                'after_gift_price': after_gift_price,
                'approved': approved
            }

            if approved and 'gift_value[]' in request.form:
                gift_values = request.form.getlist('gift_value[]')
                try:
                    gift_value = int(gift_values[i])
                except (ValueError, IndexError):
                    return render_template('index.html', result={'error': f'Gi√° tr·ªã qu√† c·ªßa {product} kh√¥ng h·ª£p l·ªá.'})

                fund = (after_gift_price - G) * total_qty
                base_commission = get_base_commission(product)
                company_commission = base_commission * sell_qty
                bonus = fund - gift_value
                commission = bonus + company_commission
                total_commission += commission

                product_result['commission_data'] = {
                    'fund': fund,
                    'gift_value': gift_value,
                    'bonus': bonus,
                    'total_commission': commission
                }

            product_results.append(product_result)

        result = {
            'products': product_results,
            'total_commission': total_commission
        }

    return render_template('index.html', result=result)

# ƒêƒÉng k√Ω font Unicode
font_path = "DejaVuSans.ttf"
if os.path.exists(font_path):
    pdfmetrics.registerFont(TTFont("DejaVu", font_path))
else:
    raise FileNotFoundError("Thi·∫øu file font DejaVuSans.ttf trong th∆∞ m·ª•c")

@app.route('/download_pdf', methods=['POST'])
def download_pdf():
    products = request.form.getlist('product[]')
    sell_quantities = request.form.getlist('sell_qty[]')
    gift_quantities = request.form.getlist('gift_qty[]')
    after_gift_prices = request.form.getlist('after_gift_price[]')
    approved_list = request.form.getlist('approved[]')
    gift_values = request.form.getlist('gift_value[]')
    funds = request.form.getlist('fund[]')
    total_commission = request.form.get('total_commission', '0')

    buffer = io.BytesIO()
    doc = SimpleDocTemplate(
        buffer, pagesize=A4,
        leftMargin=2*cm, rightMargin=2*cm,
        topMargin=2*cm, bottomMargin=2*cm
    )

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="CenterTitle", fontName="DejaVu", fontSize=18, alignment=1, spaceAfter=20))
    styles.add(ParagraphStyle(name="NormalVN", fontName="DejaVu", fontSize=11, leading=14))
    styles.add(ParagraphStyle(name="RightSmall", fontName="DejaVu", fontSize=9, alignment=2, textColor=colors.grey))
    styles.add(ParagraphStyle(name="RightBold", fontName="DejaVu", fontSize=11, alignment=2))

    # ‚úÖ style cho cell ƒë·ªÉ t·ª± xu·ªëng d√≤ng
    style_cell = ParagraphStyle(
        name="CellStyle",
        fontName="DejaVu",
        fontSize=10,
        leading=12,
        alignment=0,     # cƒÉn tr√°i ƒë·ªÉ xu·ªëng d√≤ng
        wordWrap='CJK'   # t·ª± ƒë·ªông xu·ªëng d√≤ng
    )

    story = []

    # üîπ Header: Logo + Ng√†y xu·∫•t b√°o c√°o
    logo_path = os.path.join(app.root_path, "static", "logo.png")
    try:
        logo = Image(logo_path, width=5.1*cm, height=1*cm)
    except:
        logo = Paragraph("", styles["NormalVN"])

    today = datetime.datetime.now(ZoneInfo("Asia/Ho_Chi_Minh")).strftime("%d/%m/%Y %H:%M")
    header_data = [[logo, Paragraph(f"Ng√†y xu·∫•t b√°o c√°o: {today}", styles["RightSmall"])]]
    header_table = Table(header_data, colWidths=[4*cm, 12*cm])
    header_table.setStyle(TableStyle([
        ('VALIGN', (0,0), (-1,-1), 'TOP'),
        ('ALIGN', (1,0), (1,0), 'RIGHT'),
    ]))
    story.append(header_table)
    story.append(Spacer(1, 10))

    # üîπ Ti√™u ƒë·ªÅ
    story.append(Paragraph("B√ÅO C√ÅO HOA H·ªíNG", styles["CenterTitle"]))
    story.append(Spacer(1, 12))

    # üîπ D·ªØ li·ªáu b·∫£ng
    headers = ["S·∫£n ph·∫©m", "SL B√°n", "SL T·∫∑ng", "Gi√° sau t·∫∑ng",
               "Tr·∫°ng th√°i", "Qu·ªπ qu√† t·∫∑ng", "GT qu√† t·∫∑ng", "Hoa h·ªìng SP"]

    data = [[Paragraph(h, style_cell) for h in headers]]
    total_commission_all = 0

    for i, product in enumerate(products):
        try:
            sell_qty = int(sell_quantities[i])
            gift_qty = int(gift_quantities[i])
            total_qty = sell_qty + gift_qty
            D = float(get_market_price(product))
            G = float(get_price(product, sell_qty))
            base_commission = get_base_commission(product)

            F = (D * sell_qty) / total_qty if total_qty > 0 else 0
            fund_val = (F - G) * total_qty
            try:
                gift_val = float(gift_values[i])
            except:
                gift_val = 0

            commission_company = base_commission * sell_qty
            commission_product = (fund_val - gift_val) + commission_company
            total_commission_all += commission_product

            price = "{:,.0f}‚Ç´".format(F)
            fund_str = "{:,.0f}‚Ç´".format(fund_val)
            gift_str = "{:,.0f}‚Ç´".format(gift_val)
            commission_str = "{:,.0f}‚Ç´".format(commission_product)
            status = "DUY·ªÜT" if approved_list[i] == "True" else "KH√îNG DUY·ªÜT"

            data.append([
                Paragraph(product, style_cell),
                Paragraph(str(sell_qty), style_cell),
                Paragraph(str(gift_qty), style_cell),
                Paragraph(price, style_cell),
                Paragraph(status, style_cell),
                Paragraph(fund_str, style_cell),
                Paragraph(gift_str, style_cell),
                Paragraph(commission_str, style_cell)
            ])

        except Exception as e:
            print("L·ªói:", e)

    # Th√™m d√≤ng t·ªïng hoa h·ªìng ngay trong b·∫£ng
    data.append([
        Paragraph("<b>T·ªîNG HOA H·ªíNG</b>", style_cell),
        "", "", "", "", "", "",
        Paragraph(f"<b>{total_commission_all:,.0f}‚Ç´</b>", style_cell)
    ])

    # üîπ B·∫£ng ch√≠nh
    col_widths = [3*cm, 2*cm, 2*cm, 2.2*cm, 2*cm, 3*cm, 3*cm, 3*cm]
    table = Table(data, repeatRows=1, colWidths=col_widths)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#d8e806")),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,0), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'DejaVu'),
        ('FONTSIZE', (0,0), (-1,0), 11),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
        ('ROWBACKGROUNDS', (0,1), (-1,-2), [colors.whitesmoke, colors.lightgrey]),

        # ‚úÖ D√≤ng t·ªïng hoa h·ªìng
        ('SPAN', (0,-1), (-2,-1)),  # g·ªôp 7 c·ªôt ƒë·∫ßu
        ('BACKGROUND', (0,-1), (-1,-1), colors.lightgrey),
        ('ALIGN', (0,-1), (-1,-1), 'CENTER'),  # cƒÉn gi·ªØa c·∫£ d√≤ng t·ªïng
        ('FONTNAME', (0,-1), (-1,-1), 'DejaVu'),
        ('FONTSIZE', (0,-1), (-1,-1), 12),
    ]))
    story.append(table)
    story.append(Spacer(1, 30))



    # üîπ Footer
    footer_data = [
        [
            Paragraph("Ng∆∞·ªùi x√©t duy·ªát", styles["NormalVN"]),
            Paragraph("Ng∆∞·ªùi l·∫≠p b√°o c√°o", styles["RightBold"])
        ]
    ]
    footer_table = Table(footer_data, colWidths=[8 * cm, 8 * cm])
    footer_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (0,0), 'LEFT'),
        ('ALIGN', (1,0), (1,0), 'RIGHT'),
        ('FONTNAME', (0,0), (-1,-1), 'DejaVu'),
        ('FONTSIZE', (0,0), (-1,-1), 11),
        ('TOPPADDING', (0,0), (-1,-1), 30),
    ]))
    story.append(footer_table)

    doc.build(story)

    buffer.seek(0)
    return send_file(
        buffer,
        as_attachment=True,
        download_name="bao_cao_hoa_hong.pdf",
        mimetype="application/pdf"
    )




if __name__ == '__main__':
    app.run(debug=True)